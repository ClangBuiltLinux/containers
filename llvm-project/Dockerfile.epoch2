FROM docker.io/alpine:edge AS source
RUN wget --no-clobber \
  https://github.com/llvm/llvm-project/releases/download/llvmorg-14.0.1/llvm-project-14.0.1.src.tar.xz

### START STAGE2

FROM ghcr.io/clangbuiltlinux/llvm-project:stage2 as prev_epoch
FROM docker.io/alpine:edge as stage_two

COPY --from=prev_epoch /usr/local/bin /usr/local/bin
COPY --from=prev_epoch /usr/local/lib /usr/local/lib
COPY --from=prev_epoch /usr/local/include /usr/local/include

# TODO: I think we want to use CMAKE_INSTALL_LIBDIR, CMAKE_INSTALL_PREFIX, and
# DESTDIR to start building up the sysroot...then we could avoid this
# symlinking nonsense at the start of other builds.
RUN cd /usr/lib/ && \
  for library in libc++abi.so.1 libc++.a libc++abi.a libc++.so.1 libunwind.so.1 libunwind.a; \
    do ln -sv /usr/local/lib/$(uname -m)-alpine-linux-musl/${library} .; \
  done

RUN apk add musl-dev

# Pause for a quick sanity check
COPY hello.c hello.cpp /
RUN clang hello.c && ./a.out && \
  clang hello.c -static && ./a.out && \
  clang++ hello.cpp && ./a.out && \
  clang++ hello.cpp -static -lc++abi && ./a.out

COPY --from=source llvm-project-14.0.1.src.tar.xz /
RUN tar xf llvm-project-14.0.1.src.tar.xz && \
  mv llvm-project-14.0.1.src llvm-project

RUN apk add --no-cache cmake ninja python3 zlib-dev git zlib-static

# Cmake will prioritize .so over .a. :(
RUN rm /lib/libz.so

COPY stage2.cmake llvm-project/.
ARG LLVM_BUILD_DIR=llvm-project/llvm/build
RUN cmake \
  -B ${LLVM_BUILD_DIR} \
  -C llvm-project/stage2.cmake \
  -D LLVM_DEFAULT_TARGET_TRIPLE=$(clang -print-target-triple) \
  -S llvm-project/llvm \
  -G Ninja

RUN ninja -C ${LLVM_BUILD_DIR} install-clang install-lld
RUN ninja -C ${LLVM_BUILD_DIR} install-clang-resource-headers
RUN ninja -C ${LLVM_BUILD_DIR} \
  install-llvm-ar \
  install-llvm-nm \
  install-llvm-objcopy \
  install-llvm-objdump \
  install-llvm-ranlib \
  install-llvm-readelf \
  install-llvm-strip

RUN apk del musl-dev cmake ninja python3 zlib-dev git zlib-static
